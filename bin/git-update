#!/bin/bash

# Resolve the absolute path of the script's directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
LIB_DIR="${SCRIPT_DIR}/../lib"

# Load libraries using absolute paths
source "${LIB_DIR}/core.sh"
source "${LIB_DIR}/i18n.sh"

# Load language settings
load_language "$1" "$SCRIPT_DIR"

shift # Remove the language argument from the list so that only repo paths remain.

# Get repo paths from arguments
REPOS_TO_UPDATE=("$@")

if [ ${#REPOS_TO_UPDATE[@]} -eq 0 ]; then
    info "${MSG_NO_REPO_TO_UPDATE}"
    exit 0
fi

info "${MSG_TOTAL} ${#REPOS_TO_UPDATE[@]} ${MSG_UPDATE_STARTING}"
info "====================================================="

for repo_path in "${REPOS_TO_UPDATE[@]}"; do
    repo_name=$(basename "$repo_path")
    info "${BOLD}${MSG_REPO_PROCESSING}: ${BLUE}${repo_name}${NC}"
    
    cd "$repo_path" || { error "${MSG_REPO_NOT_ACCESSIBLE} ${repo_path}"; continue; }

    if [ -n "$(git status --porcelain)" ]; then
        warning "  -> ${MSG_STATUS_LOCAL_CHANGES_FOUND}"
        info "  -> ${MSG_RUNNING_GIT_ADD}"
        git add .
        
        # Interactive commit message
        commit_type=""
        while [ -z "$commit_type" ]; do
            info "    ${PROMPT_COMMIT_TYPE_MENU}"
            read -p "    " choice
            case "$choice" in
                1) commit_type="feat" ;;
                2) commit_type="fix" ;;
                3) commit_type="docs" ;;
                4) commit_type="style" ;;
                5) commit_type="refactor" ;;
                6) commit_type="chore" ;;
                *) error "  -> ${MSG_INVALID_CHOICE}" ;;
            esac
        done
        read -p "    ${PROMPT_COMMIT_SCOPE} " commit_scope
        read -p "    ${PROMPT_COMMIT_MESSAGE} " commit_message

        if [ -n "$commit_scope" ]; then
            COMMIT_MSG="$commit_type($commit_scope): $commit_message"
        else
            COMMIT_MSG="$commit_type: $commit_message"
        fi

        info "  -> ${MSG_RUNNING_GIT_COMMIT} ${COMMIT_MSG})"
        git commit -m "$COMMIT_MSG" > /dev/null
        success "  -> ${MSG_COMMIT_SUCCESS} ${COMMIT_MSG}"
        
        info "  -> ${MSG_RUNNING_GIT_PUSH}"
        if git push; then
            success "  -> ${MSG_PUSH_SUCCESS}"
        else
            error "  -> ${MSG_PUSH_FAIL}"
        fi
    else
        success "  -> ${MSG_STATUS_DIR_CLEAN}"
        
        if git rev-parse --abbrev-ref --symbolic-full-name @{u} >/dev/null 2>&1; then
            git fetch --quiet
            AHEAD=$(git rev-list --count @{u}..@)
            BEHIND=$(git rev-list --count @..@{u})

            if [ "$AHEAD" -gt 0 ] && [ "$BEHIND" -eq 0 ]; then
                info "  -> ${MSG_ONLY_PUSH_AWAITED}"
                if git push; then
                    success "  -> ${MSG_PUSH_AWAITED_SUCCESS}"
                else
                    error "  -> ${MSG_PUSH_FAIL}"
                fi
            elif [ "$BEHIND" -gt 0 ]; then
                error "  -> ${BOLD}${MSG_REPO_BEHIND_WARNING}${NORMAL}"
                info ""
                info "    ${BOLD}${MENU_TITLE}${NORMAL}"
                info "    ---------------------------------------"
                info "    ${CYAN}${MENU_OPTION_A}${NC}"
                info "      ${NORMAL}${MENU_DESC_A}${NORMAL}"
                echo ""
                info "    ${YELLOW}${MENU_OPTION_P}${NC}"
                info "      ${NORMAL}${MENU_DESC_P}${NORMAL}"
                echo ""
                info "    ${YELLOW}${MENU_OPTION_R}${NC}"
                info "      ${NORMAL}${MENU_DESC_R}${NORMAL}"
                echo ""
                info "    ${RED}${MENU_OPTION_S} (${BOLD}ÇOK RİSKLİ! DİKKAT!${NORMAL}${RED})"
                info "      ${NORMAL}${MENU_DESC_S}${NORMAL}"
                info "    ---------------------------------------"
                
                # In the English menu, S, P, R, E letters will be used. In Turkish, A, P, R, S.
                # So it's better to adjust the case according to the language.
                # For now, it is kept combined for simplicity.
                read -p "    ${PROMPT_INTERACTIVE_CHOICE}" user_choice

                case "$user_choice" in
                                        [aAsS]) # Skip (tr) or Skip (en)
                        info "  -> ${MSG_CHOICE_A}"
                        ;;
                                        [pP]) # Pull
                        warning "  -> ${MSG_CHOICE_P}"
                        if git pull; then
                            success "  -> ${MSG_PULL_SUCCESS}"
                        else
                            error "  -> ${MSG_PULL_FAIL}"
                            error "  -> ${MSG_PULL_FAIL_MANUAL_ACTION}"
                        fi
                        ;;
                                        [rR]) # Rebase
                        warning "  -> ${MSG_CHOICE_R}"
                        if git pull --rebase; then
                            success "  -> ${MSG_REBASE_SUCCESS}"
                        else
                            error "  -> ${MSG_REBASE_FAIL}"
                            error "  -> ${MSG_PULL_FAIL_MANUAL_ACTION}"
                        fi
                        ;;
                                        [sE]) # Hard Reset (tr) or hard rEset (en)
                        error "  -> ${BOLD}${MSG_CHOICE_S}${NORMAL}"
                        read -p "    ${PROMPT_RESET_CONFIRM} (${LBL_YES}/${LBL_NO}): " confirm_reset
                        if [[ "$confirm_reset" == "${LBL_RESET_CONFIRM_YES}" ]]; then
                            info "  -> ${MSG_RESETTING_REPO}"
                            if git reset --hard @{u}; then
                                success "  -> ${MSG_RESET_SUCCESS}"
                            else
                                error "  -> ${MSG_RESET_FAIL}"
                            fi
                        else
                            info "  -> ${MSG_RESET_CANCELLED}"
                        fi
                        ;;
                    *)
                        warning "  -> ${MSG_INVALID_CHOICE}"
                        ;;
                esac
            else
                success "  -> ${MSG_REPO_ALREADY_UP_TO_DATE}"
            fi
        else
            warning "  -> ${MSG_NO_UPSTREAM_WARNING}"
        fi
    fi
    info "-----------------------------------------------------"
done

success "${BOLD}${MSG_UPDATE_COMPLETE}"